<?php

namespace Proxies\__CG__\Sportimimi\userBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class News extends \Sportimimi\userBundle\Entity\News implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', '' . "\0" . 'Sportimimi\\userBundle\\Entity\\News' . "\0" . 'title', '' . "\0" . 'Sportimimi\\userBundle\\Entity\\News' . "\0" . 'dateCreated', '' . "\0" . 'Sportimimi\\userBundle\\Entity\\News' . "\0" . 'content', 'profile', 'comments', 'doingSports', 'sport', '' . "\0" . 'Sportimimi\\userBundle\\Entity\\News' . "\0" . 'place', 'participants');
        }

        return array('__isInitialized__', 'id', '' . "\0" . 'Sportimimi\\userBundle\\Entity\\News' . "\0" . 'title', '' . "\0" . 'Sportimimi\\userBundle\\Entity\\News' . "\0" . 'dateCreated', '' . "\0" . 'Sportimimi\\userBundle\\Entity\\News' . "\0" . 'content', 'profile', 'comments', 'doingSports', 'sport', '' . "\0" . 'Sportimimi\\userBundle\\Entity\\News' . "\0" . 'place', 'participants');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (News $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setPlace(\Sportimimi\userBundle\Entity\Place $place)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlace', array($place));

        return parent::setPlace($place);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlace', array());

        return parent::getPlace();
    }

    /**
     * {@inheritDoc}
     */
    public function getDoingSports()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDoingSports', array());

        return parent::getDoingSports();
    }

    /**
     * {@inheritDoc}
     */
    public function setDoingSports($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDoingSports', array($value));

        return parent::setDoingSports($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', array());

        return parent::getContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setContent($content)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContent', array($content));

        return parent::setContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getProfile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProfile', array());

        return parent::getProfile();
    }

    /**
     * {@inheritDoc}
     */
    public function setProfile(\Sportimimi\userBundle\Entity\Profile $author)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProfile', array($author));

        return parent::setProfile($author);
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreated($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreated', array($date));

        return parent::setDateCreated($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreated', array());

        return parent::getDateCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function getSport()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSport', array());

        return parent::getSport();
    }

    /**
     * {@inheritDoc}
     */
    public function setSport(\Sportimimi\userBundle\Entity\Category $sport)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSport', array($sport));

        return parent::setSport($sport);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getParticipants()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParticipants', array());

        return parent::getParticipants();
    }

    /**
     * {@inheritDoc}
     */
    public function addParticipant(\Sportimimi\userBundle\Entity\Profile $profile)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addParticipant', array($profile));

        return parent::addParticipant($profile);
    }

    /**
     * {@inheritDoc}
     */
    public function removeParticipant(\Sportimimi\userBundle\Entity\Profile $profile)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeParticipant', array($profile));

        return parent::removeParticipant($profile);
    }

    /**
     * {@inheritDoc}
     */
    public function addComment(\Sportimimi\userBundle\Entity\Comment $comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComment', array($comment));

        return parent::addComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', array());

        return parent::getComments();
    }

}
